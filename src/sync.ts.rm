import { Configuration, exec, isDirectory, info, sshSucceeds, ssh, execSucceeds, warn, isFile } from './common'
import { copy, remove, writeJSON, mkdirs, move } from 'fs-extra'
import { join, resolve, parse } from 'path'
import { homedir } from 'os'
import { performance } from 'perf_hooks';

export async function syncPrevious(config: Configuration, clones: Record<string, string>, id: string, destination?: string) {
  if (destination) {
    destination = resolve(destination)
    if (parse(destination).base !== id) {
      destination = resolve(destination, id)
    }
  } else if (clones[id]) {
    destination = clones[id]
  } else {
    let cwd = resolve(process.cwd())
    let cwdBase = parse(cwd).base
    destination = cwdBase === id ? cwdBase : resolve(cwd, id)
  }

  const localObjectCachePath = resolve(homedir(), '.minami-user', 'objects')
  const localObjectPath = resolve(homedir(), '.minami-user', 'objects', id)
  await mkdirs(localObjectCachePath)

  let remoteObjectExists = await sshSucceeds(config, `test -d ~/.minami-user/objects/${id}`)
  let localObjectExists = await isDirectory(localObjectPath)
  let workingDirectoryExists = await isDirectory(destination)

  if (clones[id] && clones[id] !== workingDirectory) {
    info('Already synced, but not to the given destination; copying existing files')
    await copy(clones[id], workingDirectory)
  }

  if (await isDirectory(localObjectPath)) {
    if (clones[id]) {

    } else {
      warn(`Object has been removed by the user; run 'minami drop ${id}' or `)
      return 1
    }
      execSucceeds('git', [`--git-dir=${localObjectPath}`, `--work-tree=${workingDirectory}`, 'add', '.'])

  } else {
    warn(`Object is broken; run 'minami fix ${id}' to repair`)
    if (clones[id]) {
      warn(`Orphaned files are located at '${clones[id]}'`)
    }
    return 1
  }

  if () {
    info('The object exists on the remote system')
    if (await isDirectory(localObjectPath)) {
      info('Syncronizing with the remote system')
      await exec('git', [`--git-dir=${localObjectPath}`, `--work-tree=${workingDirectory}`, 'add', '.'])
      await exec('git', [`--git-dir=${localObjectPath}`, `--work-tree=${workingDirectory}`, 'commit', '-m', 'update'])
      await exec('git', [`--git-dir=${localObjectPath}`, `--work-tree=${workingDirectory}`, 'pull'])
      await exec('git', [`--git-dir=${localObjectPath}`, 'push'])
    } else {
      info('The object does not exist on this system; cloning object')
      await exec('git', [`--git-dir=${localObjectCachePath}`, `--work-tree=${workingDirectory}`, 'clone', `ssh://${config.host}/~/.minami-user/objects/${id}`])
    }
  } else {
    info('The object does not exist on the remote system')
    if (! await isDirectory(localObjectPath)) {
      info('The object does not exist on this system; creating object')
      await copy(resolve(homedir(), '.minami-user', 'skel'), workingDirectory)
      await exec('git', [`--git-dir=${localObjectPath}`, `--work-tree=${workingDirectory}`, 'init'])
      await exec('git', [`--git-dir=${localObjectPath}`, `--work-tree=${workingDirectory}`, 'add', '.'])
      await exec('git', [`--git-dir=${localObjectPath}`, `--work-tree=${workingDirectory}`, 'commit', '-m', 'update'])
    }
    info('Mirroring object on the remote system')
    await ssh(config, `mkdir -p ~/.minami-user/objects/${id}; git -C ~/.minami-user/objects/${id} --git-dir=. init`)
    await exec('git', [`--git-dir=${localObjectPath}`, 'push', '--mirror', `ssh://${config.host}/~/.minami-user/objects/${id}`])
  }

  if (clones[id] && clones[id] !== workingDirectory) {
    info('Removing files left over from the destination change')
    remove(clones[id])
  }

  info('Updating local object index')
  clones[id] = workingDirectory
  await writeJSON(join(homedir(), '.minami-user', 'clones.json'), clones)

  return 0
}